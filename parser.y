%{
#include <stdio.h>
#include <stdlib.h>
%}



%token ID CINT CFLOAT CBOOL CCHAR CSTRING CARRAY
%token INT FLOAT BOOL CHAR GRAPH STRING CONST REGISTER
%token MAIN T_BEGIN END IF ELIF ELSE SWITCH CASE DEFAULT FOR LOOP EXIT WHEN UNLESS PRINT
%token NOT LBRACE RBRACE SEMICOLON COMMA COLON DO
%token TYPE BREAK PROCEDURE FUNCTION RETURN DOT ASSIGN
%token LBRACKET RBRACKET CALL PROGRAM ERROR

%left OR AND
%left PLUS MINUS MULTIPLY DIVIDE

%right POWER

%nonassoc LESSTHAN GREATERTHAN LESSTHANOREQUAL GREATERTHANOREQUAL EQUALS NOTEQUAL
%nonassoc LPAREN RPAREN NOT UNIPLUS UNIMINUS

%start RULE_PROGRAM


%%

RULE_PROGRAM       : RULE_SUBPROGRAMS_ RULE_MAIN T_BEGIN RULE_STMTS END MAIN
              ;
RULE_MAIN          : MAIN LPAREN RULE_ARGS RPAREN
              ;
RULE_VAR           : CONST RULE_TYPE RULE_ASSIGN
              | RULE_TYPE RULE_ASSIGN
              | RULE_REGISTER_DECL
              ;
RULE_TYPE          : INT | FLOAT | BOOL | CHAR | GRAPH | STRING
              ;
RULE_ASSIGN        : ID RULE_ARRAY_DECL ASSIGN RULE_ASSIGN_ SEMICOLON
              ;
RULE_ASSIGN_       : RULE_EXP | CCHAR | CSTRING | CARRAY
              ;
RULE_ARRAY_DECL    : LBRACE RULE_EXP RBRACE RULE_ARRAY_DECL | 
              ;
RULE_REGISTER_DECL : REGISTER RULE_TYPE ID SEMICOLON
              ;
RULE_EXPS          : RULE_EXP | RULE_EXP RULE_EXPS 
              ;
RULE_LIT           : CINT | CFLOAT | CBOOL
              ;
RULE_O             : ID RULE_O_ | RULE_LIT | LPAREN RULE_EXP RPAREN
              ;
RULE_O_            : LPAREN RULE_EXPS RPAREN | DOT ID
              ;
RULE_AU            : UNIPLUS RULE_AU | UNIMINUS RULE_AU | RULE_O
              ;
RULE_AP            : RULE_AP POWER RULE_AP | RULE_AU
              ;
RULE_AF            : RULE_AF MULTIPLY RULE_AF | RULE_AF DIVIDE RULE_AF | RULE_AP
              ;
RULE_AT            : RULE_AT PLUS RULE_AF | RULE_AT MINUS RULE_AF | RULE_AF
              ;
RULE_R             : RULE_AT RULE_R_
              ;
RULE_R_            : LESSTHAN RULE_AT | GREATERTHAN RULE_AT | LESSTHANOREQUAL RULE_AT | GREATERTHANOREQUAL RULE_AT | EQUALS RULE_AT | NOTEQUAL RULE_AT | 
              ;
RULE_LU            : NOT RULE_R | RULE_R
              ;
RULE_LC            : RULE_LC AND RULE_LC | RULE_LU
              ;
RULE_EXP           : RULE_EXP OR RULE_EXP | RULE_LC
              ;
RULE_ARGS          : TYPE ID | TYPE ID COMMA RULE_ARGS | 
              ;
RULE_STMTS         : RULE_STMT | RULE_STMT RULE_STMTS
              ;
RULE_STMT          : RULE_VAR | RULE_ASSIGN | ID LPAREN RULE_EXPS RPAREN SEMICOLON | RULE_SUBPROGRAM | RULE_IF | RULE_SWITCH | RULE_FOR | RULE_LOOP | RULE_WHEN | RULE_UNLESS | RULE_PRINT
              ;
RULE_SUBPROGRAMS   : RULE_SUBPROGRAM | RULE_SUBPROGRAM RULE_SUBPROGRAMS
              ;
RULE_SUBPROGRAMS_  : RULE_SUBPROGRAMS |
RULE_SUBPROGRAM    : RULE_FUNCTION | RULE_PROCEDURE 
              ;
RULE_FUNCTION      : FUNCTION TYPE ID LPAREN RULE_ARGS RPAREN T_BEGIN RULE_STMTS RULE_RETURN END ID
              ;
RULE_RETURN        : RETURN RULE_EXP SEMICOLON | 
              ;
RULE_PROCEDURE     : PROCEDURE ID LPAREN RULE_ARGS RPAREN T_BEGIN RULE_STMTS END ID
              ;
RULE_IF            : IF LPAREN RULE_EXP RPAREN RULE_STMTS RULE_ELIF RULE_ELSE END IF
              ;
RULE_ELIF          : ELIF LPAREN RULE_EXP RPAREN RULE_STMTS ELIF | 
              ;
RULE_ELSE          : ELSE RULE_STMTS | 
              ;
RULE_SWITCH        : SWITCH LPAREN RULE_VAR RPAREN RULE_CASE RULE_DEFAULT END SWITCH
              ;
RULE_CASE          : CASE LPAREN RULE_EXP LPAREN COLON RULE_STMTS BREAK CASE | 
              ;
RULE_DEFAULT       : DEFAULT COLON RULE_STMTS BREAK | 
              ;
RULE_FOR           : FOR LPAREN RULE_ASSIGN SEMICOLON RULE_EXP SEMICOLON RULE_EXP RPAREN RULE_STMTS END FOR
              ;
RULE_LOOP          : LOOP RULE_STMTS END LOOP
              ;
RULE_WHEN          : EXIT WHEN RULE_EXP
              ;
RULE_UNLESS        : UNLESS RULE_EXP DO RULE_STMT
              ;
RULE_PRINT         : PRINT LPAREN RULE_PRINT_ RPAREN SEMICOLON
              ;
RULE_PRINT_        : RULE_EXP | CCHAR | CSTRING | CARRAY
              ;
%%
